// The `prelude` module provides a convenient way to import a number
// of common dependencies at once. This can be useful if you are working
// with multiple parts of the library and want to avoid having
// to import each dependency individually.
use ethers::prelude::*;

// NOTE: requires multi-thread feature on `tokio`
// we can customize as well in terms of no. of CPUs allotted for the work
#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    dotenv::from_path("./.env").expect("Failed in loading the file");
    let RPC_URL = std::env::var("SEPOLIA_RPC_URL").expect("Please check if it's empty");

    let provider = Provider::<Http>::try_from(RPC_URL).expect("Failed to connect w RPC");

    // get block number
    let block_number: U64 = provider.get_block_number().await?;
    println!("current block number: {block_number}");
    // TODO: get ETH balance of an account

    // TODO: get nonce of an account

    // TODO: get address from private key

    // TODO: get nonce of a given address

    // TODO: Connect to a contract using Rust bindings generated by Foundry tool

    // TODO: send a transaction

    // TODO: call a function

    // TODO: list the functions of a contract

    // TODO: check if a function exists in a contract

    Ok(())
}
